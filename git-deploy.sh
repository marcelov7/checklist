#!/bin/bash

# Script de Deploy via Git - Sistema de Checklist Devaxis
# Execute no servidor: ./git-deploy.sh

echo "=== DEPLOY VIA GIT - SISTEMA DE CHECKLIST ==="
echo "Data: $(date)"
echo "Localiza√ß√£o: /home/devaxis-checklist/htdocs/checklist.devaxis.com.br/"
echo "=============================================="

# Definir diret√≥rios
PROJECT_DIR="/home/devaxis-checklist/htdocs/checklist.devaxis.com.br"
PUBLIC_DIR="$PROJECT_DIR/public"

# 1. Navegar para o diret√≥rio do projeto (pai do public)
echo "üìÅ Navegando para diret√≥rio do projeto..."
cd $PROJECT_DIR

# 2. Verificar se j√° existe um reposit√≥rio Git
if [ ! -d ".git" ]; then
    echo "üîÑ Clonando reposit√≥rio pela primeira vez..."
    # Se n√£o existe, fazer clone inicial
    /usr/bin/git clone https://github.com/marcelov7/checklist.git .
else
    echo "üîÑ Atualizando reposit√≥rio existente..."
    # Se existe, fazer pull das √∫ltimas altera√ß√µes
    /usr/bin/git fetch origin
    /usr/bin/git reset --hard origin/main
    /usr/bin/git pull origin main
fi

# 3. Verificar se o composer est√° dispon√≠vel
echo "üì¶ Verificando depend√™ncias..."
if command -v composer &> /dev/null; then
    echo "üì¶ Instalando depend√™ncias do Composer..."
    composer install --optimize-autoloader --no-dev --no-interaction
else
    echo "‚ö†Ô∏è  Composer n√£o encontrado, verificando se vendor/ existe..."
    if [ ! -d "vendor" ]; then
        echo "‚ùå ERRO: Depend√™ncias n√£o encontradas e Composer n√£o dispon√≠vel"
        echo "   Voc√™ precisa fazer upload manual do vendor/ ou instalar Composer"
    fi
fi

# 4. Configurar arquivo .env para produ√ß√£o
echo "‚öôÔ∏è  Configurando ambiente de produ√ß√£o..."
if [ -f ".env.production" ]; then
    cp .env.production .env
    echo "‚úÖ Arquivo .env configurado a partir de .env.production"
else
    echo "‚ö†Ô∏è  Criando .env b√°sico para produ√ß√£o..."
    cat > .env << 'EOL'
APP_NAME="Sistema de Checklist"
APP_ENV=production
APP_DEBUG=false
APP_URL=https://checklist.devaxis.com.br

APP_LOCALE=pt
APP_FALLBACK_LOCALE=pt

DB_CONNECTION=sqlite

SESSION_DRIVER=file
SESSION_LIFETIME=480
SESSION_DOMAIN=.devaxis.com.br

LOG_CHANNEL=stack
LOG_LEVEL=error

CACHE_STORE=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=database

MAIL_FROM_ADDRESS="noreply@devaxis.com.br"
MAIL_FROM_NAME="${APP_NAME}"
EOL
fi

# 5. Gerar chave da aplica√ß√£o se n√£o existir
echo "üîë Configurando chave da aplica√ß√£o..."
if ! /bin/grep -q "APP_KEY=base64:" .env; then
    /usr/bin/php artisan key:generate --force
    echo "‚úÖ Nova chave APP_KEY gerada"
else
    echo "‚úÖ Chave APP_KEY j√° existe"
fi

# 6. Configurar permiss√µes b√°sicas
echo "üîí Configurando permiss√µes..."
/bin/chmod -R 755 $PROJECT_DIR
/bin/chmod -R 775 $PROJECT_DIR/storage
/bin/chmod -R 775 $PROJECT_DIR/bootstrap/cache

# 7. Criar diret√≥rios necess√°rios se n√£o existirem
echo "üìÅ Criando diret√≥rios necess√°rios..."
/bin/mkdir -p storage/logs
/bin/mkdir -p storage/framework/sessions
/bin/mkdir -p storage/framework/views
/bin/mkdir -p storage/framework/cache
/bin/mkdir -p bootstrap/cache

# 8. Executar migra√ß√µes
echo "üóÑÔ∏è  Executando migra√ß√µes do banco de dados..."
/usr/bin/php artisan migrate --force

# 9. Executar seeders para dados iniciais
echo "üå± Verificando seeders..."
/usr/bin/php artisan db:seed --force --class=DadosExemploSeeder

# 10. Criar link simb√≥lico do storage
echo "üîó Criando link simb√≥lico do storage..."
/usr/bin/php artisan storage:link

# 11. Otimizar aplica√ß√£o para produ√ß√£o
echo "‚ö° Otimizando aplica√ß√£o..."
/usr/bin/php artisan config:cache
/usr/bin/php artisan route:cache
/usr/bin/php artisan view:cache

# 12. Configurar permiss√µes finais
echo "üîí Configurando permiss√µes finais..."
/bin/chown -R devaxis-checklist:devaxis-checklist $PROJECT_DIR/storage
/bin/chown -R devaxis-checklist:devaxis-checklist $PROJECT_DIR/bootstrap/cache
/bin/chmod -R 775 $PROJECT_DIR/storage
/bin/chmod -R 775 $PROJECT_DIR/bootstrap/cache

# 13. Verificar se a estrutura est√° correta
echo "üîç Verificando estrutura final..."
if [ -f "public/index.php" ]; then
    echo "‚úÖ Estrutura Laravel OK - public/index.php encontrado"
else
    echo "‚ùå ERRO: public/index.php n√£o encontrado!"
fi

if [ -f "artisan" ]; then
    echo "‚úÖ Artisan encontrado"
else
    echo "‚ùå ERRO: artisan n√£o encontrado!"
fi

echo "=============================================="
echo "‚úÖ DEPLOY CONCLU√çDO COM SUCESSO!"
echo "üåê Sistema dispon√≠vel em: https://checklist.devaxis.com.br"
echo "üìÅ Diret√≥rio: $PROJECT_DIR"
echo "üìÅ Document Root deve apontar para: $PROJECT_DIR/public"
echo "=============================================="

# 14. Mostrar informa√ß√µes do sistema
echo ""
echo "üìä INFORMA√á√ïES DO SISTEMA:"
echo "PHP Version: $(/usr/bin/php -v | /usr/bin/head -n 1)"
echo "Laravel Version: $(/usr/bin/php artisan --version 2>/dev/null || echo 'N√£o detectado')"
echo "Espa√ßo em disco:"
/bin/df -h $PROJECT_DIR
echo "=============================================="